# Custom functions reference {.unnumbered}

This section will provide an overview of each of the custom functions we built for survey analysis in R. For each function, you will get a breakdown of:

-   what it is used for

-   the parameters it has

-   the extra customization you can add to it by passing extra arguments

::: callout-important
### Optional parameters

It is important to read the documentation here or for other functions if you are unsure on what needs to be changed in a function to suit your analysis. For example, changing the parameter `table_name` is optional for the functions on this page but if you do NOT specify a table name and you generate two Excel sheets using the same function, the latest one will overwrite older version.
:::

## What are custom functions and why are we using them?

Custom functions are functions that are not part of a package. We are using them to make using functions from published packages like `survey` more user friendly.

## Labelling data

This function will assign labels to a data set using a dictionary by comparing the variables and the codes found in the data to the ones found in the dictionary. Dictionary files' format MUST be in CSV with no gaps in the columns for variables, labels or codes.

Any unmatched labels and variables will not be changed and will be highlighted in a warning message. To view the labels, use the function `haven::as_factor()`.

### `labelling_data()`

```{r, eval=FALSE}

labelling_data (data,
                dict,
                dict_variable,
                dict_label,
                dict_code,
                dict_question)

```

#### Arguments

`data` Data to be labelled.

`dict` A dictionary data frame to use for labelling data.

`dict_variable` The name of the column that contains the names of label variables in the dictionary. Must be in quotes.

`dict_label` The name of the column that contains the labels in the dictionary. Must be in quotes.

`dict_code` The name of the column that contains the code in the dictionary. Must be in quotes.

`dict_question` OPTIONAL- Default is NULL. The name of the column in the dictionary that contains the question that you can use to label variables in the data. Must be in quotes.

#### Example

```{r, eval=FALSE}

#load in the custom functions
source("00_packages_and_functions.R")


#create data with codes to be labelled 
df <- data.frame(
  opinion = c(1, 2, 2, NA, 4, NA, 1),
  group = c(1, 3, 3, 2, 2, 1, 3),
  Sex = c(1, 1, 1, 2, 2, NA, NA)
)

#create a dictionary with variable names, codes and labels 
dict_example <- data.frame(
  variable = c("opinion", "opinion","opinion","opinion",
               "group","group","group","group",
               "Sex","Sex"),
  code = c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2),
  label = c("opinion1","opinion2","opinion3","opinion4",
            "group1","group2","group3","group4",
            "sex1","sex2"
  )
)
#use labelling_data to label the df using the dictionary 

labelled_df <- labelling_data(
  data = df,
  dict = dict_example,
  dict_variable = "variable",
  dict_label = "label",
  dict_code = "code"
)


```

## Creating frequency tables

### survey_freq_table()

Create weighted and un-weighted flexible frequency tables with the following columns:

-   A column with the name of the variable you want the frequency table for

    -   The column will list the categories available in your variable

-   Freq - Frequency of each category in your variable

-   Prop - The proportion of each category in your variable

```{r, eval=FALSE}

survey_freq_table (data,
                   variables,
                   weight = NULL,
                   output = NULL,
                   table_name = NULL)

```

#### Arguments

`data` Data to create the frequency table from

`variables` The column name(s) for variable(s) you want the frequency table for. Must be in quotes.

`weight` OPTIONAL - The name of the column that contains the weights. Must be in quotes. Default is `NULL` for un-weighted tables.

`output` OPTIONAL FOR SINGLE VARIABLES - The type of output you want from the function. The available options are `NULL`, `"download"` and `"print"`.

-   `NULL` is the default and it allows you to save the table to the environment when you use the function for a single variable.

-   `"print"` prints the frequency tables in the console - can be used for single or multiple variables.

-   `"download"` downloads a `xlsx` with the frequency table of the specified variable and weights - can be used for single or multiple variables.

`table_name` OPTIONAL - A string of the name you want for the table if you use the "download" output option. If `NULL`, then the table downloaded will be called "frequency_table.xlsx".

#### Examples

```{r, eval=FALSE}

#load in the custom functions
source("00_packages_and_functions.R")


#create data with codes to be labelled

#make the example data reproducible 
set.seed(123)
df <- data.frame(
  #create two variables 
  var_1= c(1,1,2,3,4,4,3,1),
  var_2=c(1,1,2,1,2,1,2,1),
  #create weight 
  weight= stats::runif(8, min = 0.1, max = 1))
#create a weighted frequency table 

survey_freq_table(df,
                 variables = "var_1",
                 weight = "weight")

#create an un-weighted frequency table 

survey_freq_table(df,
                 variables = "var_1")

#create a weighted frequency table across multiple variables 
#print it in the console 

survey_freq_table(df,
                 variables = c("var_1","var_2"),
                 weight = "weight", 
                 output = "print")

#create a weighted frequency table across multiple variables 
#download it as an Excel document 
survey_freq_table(df,
                 variables = c("var_1","var_2"),
                 weight = "weight", 
                 output = "download")

```

## Creating cross tabulations

### survey_crosstab()

Create weighted and un-weighted crosstabs with the following columns:

-   A column for the categories in the x variable

-   A column for the categories in the z variable - for three-way cross tabulations

-   A column for the categories in the y variable

-   Freq - contains frequencies

-   n - contains totals

-   Prop - contains proportions

```{r, eval=FALSE}
survey_crosstab (data ,
                 x ,
                 y ,
                 z = NULL,
                 weight= NULL,
                 output = NULL,
                 table_name = NULL)
```

#### Arguments

`data` Data to create the crosstab from

`x` The column name for the independent variable. Must be in quotes.

`y` The column name for the dependent variable. Must be in quotes.

`z` OPTIONAL FOR 3 WAY CROSSTABS - The column name for the second control variable. Must be in quotes.

`weight` OPTIONAL - The name of the column that contains the weights. If `NULL`, table will be un-weighted.

`output` OPTIONAL FOR SINGLE VARIABLES - The type of output you want from the function. The available options are NULL, "download" and "print".

-   `NULL` is the default and it allows you to save the table to the environment when you use the function for a single variable.

-   `"print"` prints the frequency tables in the console - can be used for single or multiple variables.

-   `"download"` downloads a `xlsx` with the frequency table of the specified variable and weights - can be used for single or multiple variables.

`table_name` OPTIONAL - A string of the name you want for the table if you use the "download" output option. If `NULL`, then the table downloaded will be called "crosstab_table.xlsx".

#### Examples

```{r, eval=FALSE}

#load in the custom functions
source("00_packages_and_functions.R")


#create data with codes to be labelled

#make the example data reproducible 
set.seed(123)
df <- data.frame(
  #create three variables 
  var_1= c(1,1,2,3,4,4,3,1),
  var_2=c(1,1,2,1,2,1,2,1),
  var_3 = c(2,3,1,1,2,2,2,3),
  #create weight 
  weight= stats::runif(8, min = 0.1, max = 1))


#create a weighted crosstab

survey_crosstab(df,
                x = "var_1",
                y= "var_2",
                weight = "weight")

#create an un-weighted crosstab

survey_crosstab(df,
                x = "var_1",
                y= "var_2")

#create a weighted crosstab across multiple variables 
#print it in the console 

survey_crosstab(df,
                x = "var_1",
                y= c("var_2","var_3"),
                weight = "weight", 
                output = "print")

#create a weighted crosstab across multiple variables 
#download it as an Excel document 
survey_crosstab(df,
                x = "var_1",
                y= c("var_2","var_3"),
                weight = "weight", 
                output = "download")

#create a weighted 3-way crosstab 

survey_crosstab(df,
                x = "var_1",
                y= "var_2",
                z="var_3",
                weight = "weight")




```

## Creating summary tables

Create weighted and un-weighted summary tables with the following columns:

-   the variable name

-   un-weighted observations

-   weighted observations - weighted tables only

-   weighted mean or mean

-   minimum value

-   maximum value

-   un-weighted missing values

-   weighted missing values - weighted tables only

### create_summary_table()

```{r, eval=FALSE}

create_summary_table (data,
                      variables,
                      weight=NULL,
                      output = NULL,
                      table_name = NULL)
```

#### Arguments

`data` Data to create the summary table from

`variables` The column name(s) for variable(s) you want the summary table for. Must be in quotes. These need to be numeric and not categorical data.

`weight` OPTIONAL - The name of the column that contains the weights. If `NULL`, table will be un-weighted.

`output` OPTIONAL FOR SINGLE VARIABLES - The type of output you want from the function. The available options are NULL, "download" and "print".

-   `NULL` is the default and it allows you to save the table to the environment when you use the function for a single variable.

-   `"print"` prints the frequency tables in the console - can be used for single or multiple variables.

-   `"download"` downloads a `xlsx` with the frequency table of the specified variable and weights - can be used for single or multiple variables.

`table_name` OPTIONAL - A string of the name you want for the table if you use the "download" output option. If `NULL`, then the table downloaded will be called "summary_table.xlsx".

#### Examples

```{r, eval=FALSE}

#load in the custom functions
source("00_packages_and_functions.R")


#create data with codes to be labelled

#make the example data reproducible 
set.seed(123)
df <- data.frame(
  #create two variables 
  var_1= c(1,1,2,3,4,4,3,1),
  var_2=c(1,1,2,1,2,1,2,1),
  #create weight 
  weight= stats::runif(8, min = 0.1, max = 1))

#create a weighted summary table 

create_summary_table(df,
                 variables = "var_1",
                 weight = "weight")

#create an un-weighted summary table 

create_summary_table(df,
                 variables = "var_1")

#create a weighted summary table across multiple variables 
#print it in the console 

create_summary_table(df,
                 variables = c("var_1","var_2"),
                 weight = "weight", 
                 output = "print")

#create a weighted summary table across multiple variables 
#download it as an Excel document 
create_summary_table(df,
                 variables = c("var_1","var_2"),
                 weight = "weight", 
                 output = "download")

```

## Calculating weighted averages

Calculate weighted means and medians.

### weighted_avg()

```{r, eval=FALSE}
weighted_avg (data,
              x,
              weight,
              type = "mean",
              by = NULL,
              ...)
```

#### Arguments

`data` Data to create the weighted average from

`x` The column you want to get the average for. Must be in quotes.

`weight` The name of the column that contains the weights. Must be in quotes.

`type` The type of average. One of "mean", "median" and "avg by grp". Default is `"mean"`.

`by` OPTIONAL FOR GROUPED MEAN - the name of the column you want to group the average by. Must be in quotes.

`...` extra arguments to pass on to the functions used in this custom function.

Check documentation for [survey::svymean()](https://www.rdocumentation.org/packages/survey/versions/4.4-2/topics/surveysummary), [survey::svyby()](https://www.rdocumentation.org/packages/survey/versions/4.4-2/topics/svyby) and [survey::svyquantile()](https://www.rdocumentation.org/packages/survey/versions/4.4-2/topics/newsvyquantile) to find out more about the extra arguments that can be passed to this function.

#### Examples

```{r, eval=FALSE}

#load in the custom functions
source("00_packages_and_functions.R")


#create data with codes to be labelled

#make the example data reproducible 
set.seed(123)
df <- data.frame(
  #create two variables 
  var_1= c(1,1,2,3,4,4,3,1),
  var_2=c(1,1,2,1,2,1,2,1),
  #create weight 
  weight= stats::runif(8, min = 0.1, max = 1))


#calculate weighted mean 
weighted_avg(df,
             x="var_1",
             weight = "weight")

#calculate weighted mean by group 
weighted_avg(df,
             x="var_1",
             by="var_2",
             weight = "weight",
             type="avg by grp")

#calculate weighted median
weighted_avg(df,
             x="var_1",
             weight = "weight",
             type = "median",
             ci=FALSE,
             quantile=0.5)

```
