---
title: "Cross tabulations" 
---

You can use `05_crosstabs.R` as a reference for this section.

You can cross tabulate two or three variables using the custom function `survey_crosstab()`. It can be used to create:

-   weighted and unweighted crosstabs
-   crosstabs for one variable or over multiple variables
-   two- or three-way crosstabs

The options listed above are not separate outputs. For example, you can create a weighted two-way cross tabulation for a single variable, or you can create an unweighted three-way cross tabulation for multiple variables, etc.

::: callout-note
## WEIGHTS

SPSS calculates weighted results slightly differently to R. SPSS rounds weighted counts to the nearest whole number, and then bases any subsequent statistics off that.

R does not round, so results are slightly more accurate. You may find that results do not exactly match SPSS output (difference of \<0.5pp) depending on how your contractor has calculated their weights.

[Get more information about weights here.](https://www.ibm.com/support/pages/some-options-fractional-weights-crosstabs)
:::

::: callout-important
## Outputs

All functions on this page have three modes of output:

-   `NULL`: save table to the environment - single variables only

-   `"print"`: results will be printed in the console - single and multiple variables

-   `"download"`: save as an Excel sheet in the working directory - single and multiple variables

**NOTE:** If you use a function to download multiple tables without using `table_name` to specify different table names for your outputs then your table will be overwritten every time you download it.
:::

## x, y and z

You will use the parameters `x`, `y` and `z` in this section for the `survey_crosstab()` function. Here is a summary of what those parameters mean:

-   `x`: This is the independent variable. It's the main variable you want to analyze.
-   `y`: This is the dependent variable. It's the variable you want to see in relation to the independent variable.
-   `z`: This is the control variable. It adds a third dimension to your crosstab, allowing you to see how the relationship between x and y changes across different levels of z.

## Load packages, functions and read in data {#load-packages-functions-and-read-in-data}

You need to make sure you load the required packages and custom functions if you haven't already. You also need to read in the required data for this script.

Even if you read in the data before, we recommend you re-run this code so that you're working with a data set without any alterations you may have done to it in previous scripts.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project.
:::

```{r, eval=FALSE}

# load packages and custom functions --------------------------------------


source("00_packages_and_functions.R")


# read in data for this script --------------------------------------------


TELSdata <- haven::read_spss("data/TELS_DUMMY_DATA.sav"
                             #ensures that user-defined missing values in the spss file
                             # are read into R as NA
                             # If you want to bring in these codes into analysis (e.g. you might be interested
                             # in the share who refused) change to TRUE.
                             , user_na=FALSE)


```

## `survey_crosstab()` {#survey_crosstab}

This section will cover how to use the custom function `survey_crosstab()`. The cross tabulations produced by this function will contain the following columns by default:

-   A column for the categories in the x variable

-   A column for the categories in the z variable - for three-way cross tabulations

-   A column for the categories in the y variable for two-way crosstabs. For three-way crosstabs, these values will be across a row instead so that the data is in wide format.

-   Freq - contains frequencies

-   n - contains totals

-   Prop - contains proportions

### Single variables

You can use `survey_crosstab()` for a single variable (column). This means that the function will create a table based on that variable alone. You can do this for two-way or three-way crosstabs. The table generated this way can be saved to the environment, printed or downloaded as an Excel document.

#### Two-way cross tabs

::: callout-important
## Data format

The `survey_crosstab()` function will create tables in a long format for two-way crosstabs as they are better for data analysis. If you want to convert the data to wide format, you can use the [documentation for the `tidyr::pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) function to help you do that.
:::

We will create a cross tabulation for `FF_Sex` and `WrkStud` below.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}

#save to environment

sex_work_stud_cross <- survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline dependent variable of crosstab
  y = "WrkStud",
  #outline weight variable
  weight = "TechEd_W3_cross"
)


#print
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline dependent variable of crosstab
  y = "WrkStud",
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "print"
)

#download
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline dependent variable of crosstab
  y = "WrkStud",
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "download"
)
```

You should see an output similar to the image below in the console, after you run the code above. You will also see a version of that saved in the environment under `sex_work_stud_cross` and an XLSX file called `survey_crosstab` in your R project folder with the same output. The output shows a cross tabulation between `FF_Sex` and `WrkStud` variables. It shows the frequencies, totals and proportions. The totals column (`n`) only has two numbers as they are the totals for each variable, `FF_Sex` and `WrkStud`.

![](images/2way_crosstab.png){fig-alt="Two way crosstab of FF_Sex and WrkStud."}

#### Three-way cross tabs

::: callout-important
## Data format

The `survey_crosstab()` function will create tables in wide format for three-way crosstabs in order to make it easier to read the data. If you want to convert the data to long format, you can use the [documentation for the `tidyr::pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) function to help you do that.
:::

We will create a cross tabulation between `FF_Sex`, `WrkStud` and `DV_Ethnicity` below.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}
# three way cross tabs - FF_Sex, WrkStud and DV_Ethnicity

#print
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline control variable
  z= "DV_Ethnicity",
  #outline dependent  variable of crosstab
  y = "WrkStud",
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "print"
)

```

You should see an output similar to the image below in the console, after you run the code above. The output shows a cross tabulation between the `FF_Sex`, `WrkStud` and `DV_Ethnicity` variables. It shows the frequencies, totals and proportions. The totals column (`n`) only has two numbers as it is the totals for each variable, `FF_Sex`, `WrkStudand`, and `DV_Ethnicity`. The `Freq` column shows the frequency of the intersection between each of the listed categories under `FF_Sex` and `DV_Ethnicity`. The `Prop` column shows the proportion of those frequencies.

![](images/3way_crosstab.png){fig-alt="Three way crosstab of FF_Sex, WrkStud and DV_Ethnicity."}

### Multiple variables

You can use `survey_crosstab()` for multiple variables at once. This means that the function will iterate itself over multiple columns you specify within the data so that you do not need to write the function multiple times for multiple columns in the same data. You can do this for two-way or three-way crosstabs. The only thing you need to consider is that the tables generated this way can only be printed or downloaded as an Excel document.

#### Two-way cross tabs

We will create cross tabulations for `FF_Sex` and loop over the following as our dependent variables: `WrkStud,` `DV_Ethnicity`, `SEN_DV`, and `NextStepStudyGeneralField`.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}

#multiple variables

# List of variables
vars <- c("WrkStud","DV_Ethnicity", "SEN_DV",  "NextStepStudyGeneralField")
#create two way cross tabulations of FF_sex and the listed vars above

#print
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline dependent variable of crosstab
  y =vars,
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "print"
)

```

#### Three-way cross tabs

We will create cross tabulations for `FF_Sex` and `WrkStud` and loop over the following as our dependent variables: `DV_Ethnicity`, `SEN_DV`, and `NextStepStudyGeneralField`.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}
# List of variables
vars <- c("DV_Ethnicity", "SEN_DV",  "NextStepStudyGeneralField")

#create three way cross tabulations of FF_sex and the listed vars above
#print
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline control variable of crosstab
  z= "WrkStud",
  #outline dependent variable of crosstab
  y = vars,
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "print"
)

#download
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline control variable of crosstab
  z="WrkStud",
  #outline dependent variable of crosstab
  y = vars,
  #outline weight variable
  weight = "TechEd_W3_cross",
  #outline the output desired
  output = "download"
)


```

## unweighted data

To create unweighted cross tabulations for your data, omit the specification of the weight parameter in the `survey_crosstab()` function.

::: {.callout-note collapse="true"}
## Optional - Find out how we create unweighted cross tabulations

When you don't specify the weight parameter, it automatically becomes assigned `NULL`. This prompts `survey_crosstab()` to create an artificial weight set to 1 (i.e. every case is treated equally) and use that instead.
:::

The example below shows how to create unweighted cross tabulations using `survey_crosstab()`.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}
# unweighted three way cross tabs - FF_Sex, WrkStud and DV_Ethnicity

#print
survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline control variable of crosstab
  z= "DV_Ethnicity",
  #outline dependent variable of crosstab
  y = "WrkStud",
  #outline the output desired
  output = "print"
)


# unweighted three way cross tabs - FF_Sex, WrkStud and multiple variables

survey_crosstab(
  #outline data
  data = TELSdata,
  #outline independent variable of crosstab
  x = "FF_Sex",
  #outline control variable of crosstab
  z= "WrkStud",
  #outline dependent variable of crosstab
  y = vars,
  #outline the output desired
  output = "print"
)
```

## Combine the learning

It's important to bear in mind that the code in this guide can be combined to make your analysis more suitable to your needs.

In the example below we will create a cross tabulation but with re-coded values for `Grade`. We will combine our code for [re-coding](formatting_filtering.qmd#re-coding) and creating crosstabs using [survey_crosstab()](#survey_crosstab) for this.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. If you are starting from this point in the guide, remember to run lines from **the top of the script** to [read in the data and reload the packages and custom functions](#load-packages-functions-and-read-in-data).
:::

```{r, eval=FALSE}

#create a crosstab of recoded grade values and sex

#example of recoding using case_when
TELSdata <- TELSdata %>%
  mutate(Grade_recode=case_when(
    Grade %in% c(1,2,3,4) ~ 1,
    Grade == 5 ~ 0))



# Adds value labels

TELSdata <- TELSdata %>%
  dplyr::mutate(Grade_recode= haven::labelled(Grade_recode
                                              , labels= c("Fail"=0, "Pass"=1)))
#create the crosstab
survey_crosstab(TELSdata,
                x="Grade_recode",
                y="FF_Sex",
                output="print")


```
