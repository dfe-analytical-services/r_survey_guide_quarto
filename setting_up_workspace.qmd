---
title: "Setting up your workspace" 
---

You can use `01_setting_up_workspace.R` as a reference for this section.

This section covers how to set up your R workspace. The [renv](#renv) and [loading in packages and functions](#loading-in-packages-and-functions) sections are crucial for running any functions mentioned in this guide.

## renv {#renv}

`renv` is a package that helps you create reproducible environments for your R projects. It gives you a separate library for each project. This gives you the benefits of isolation: different projects can use different versions of packages, and installing, updating, or removing packages in one project doesnâ€™t affect any other project.

This is important because packages get updated by their creators all the time and the functions in those packages may be updated in a way that would stop our code from working as it is currently written. Using `renv` allows us to run our processes without the risk of our code not working because of package updates. This gives us time to work on updating code without having to rush or miss deadlines.

Below is how to install all the packages needed for this project in the correct version using `renv`.

::: callout-important
## How often do I need to do this?

This step only needs to be done ONCE each time a project that uses `renv` is downloaded, forked or cloned from the repo. You do NOT need to do this every time you open a project.

You will know if a project uses `renv` if you see a `renv` folder in the project.
:::

### Step 1 - Install the `renv` package and compare packages installed vs needed

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project. Run each line separately.
:::

```{r, eval=FALSE}

#install renv
install.packages("renv")
```

After you run the code above, a message that says `"Do you want to proceed? [Y/n]?"` will come up in the console to confirm if you want to install the `renv` package. You need to type `Y` in the console and press enter.

![](images/renv.png){fig-alt="A messgae in the console saying 'Do you want to proceed? [Y/n]?'."}

### Step 2 - Download any missing packages

Now we need to compare the packages you have already to the packages needed by this project. To do this, you need to run the code below.

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project.
:::

```{r, eval=FALSE}

#compare installed and required packages
renv::restore()

```

After you run the code above, a list of the packages that are not installed at all or not installed in the correct version will appear in the console. This is followed by a message that says `"Do you want to proceed? [Y/n]?"`. You need to type `Y` and press enter to download the required in the correct versions. An example of this message is shown in the image below.

![](images/renv.png){fig-alt="A messgae in the console saying 'Do you want to proceed? [Y/n]?'."}

::: {.callout-note collapse="true"}
## Optional - updating renv

If you are using these scripts for a project and you're using more packages and you want to update `renv`, then follow these instructions. Type `renv::status()` in the console to find out what those packages are. If you want to add those packages to your `renv`, use `renv::snapshot()`.
:::

### Extra renv guidance

Read [this documentation](https://rstudio.github.io/renv/articles/renv.html) for more information on the `renv` package and how it works.

Read [this section of the DfE Analyst Guide](https://dfe-analytical-services.github.io/analysts-guide/learning-development/r.html#renv) to find out more about `renv` and ways to troubleshoot common errors.

## Loading in packages and functions {#loading-in-packages-and-functions}

We are going to use multiple packages and custom functions. Packages contain functions pre-made to help us with analytical tasks. Custom functions are ones that are made by us to help streamline repetitive tasks and provide an easier approach.

::: callout-important
You need to load these in every time you:

-   restart your project

-   close and open your project

-   clear your environment
:::

::: callout-tip
## Run the code

Run the code below in the corresponding script in your project
:::

```{r, eval=FALSE}

#load in packages and functions 

source("00_packages_and_functions.R")

```
